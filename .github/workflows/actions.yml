name: CI/CD
run-name: ${{ github.actor }} just pushed code ðŸ¤©
on:
  push:
    branches:
      - main
      - for-github-actions
  pull_request:
    branches:
      - main

jobs:
  main:
    env:
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_DATABASE: SBRP_Ais_Kachang
      PAT: ${{ secrets.PAT }}

    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3

      - name: Clean install of dependencies
        run: |
          cd frontend
          npm ci
          echo "Dependencies installed successfully âœ¨"

      - name: Build
        run: |
          cd frontend
          npm run build
          echo "Built successfully âœ¨"

      - name: Start Vite dev
        run: |
          cd frontend
          nohup npm run dev &
          echo "App running successfully âœ¨"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.6"

      - name: Install dependencies
        run: |
          cd backend && pip install -r requirements.txt
          pip install flake8
          echo "Dependencies installed successfully âœ¨"

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          echo "Linted successfully âœ¨"

      - name: Run flask service
        run: |
          cd backend
          export FLASK_APP=app.py
          export DB_USER=${{ env.MYSQL_USER }}
          export DB_PASSWORD=${{ env.MYSQL_PASSWORD }}
          export DB_HOST="localhost"
          export DB_PORT="3306"
          nohup flask run &
          echo "Flask running successfully âœ¨"

      - name: Run MySQL service
        run: |
          sudo systemctl start mysql.service
          echo "MySQL set up successfully âœ¨"

      - name: Create Database and Tables
        run: |
          mysql -u ${{ env.MYSQL_USER }} -p"${{ env.MYSQL_PASSWORD }}" -e "CREATE DATABASE ${{ env.MYSQL_DATABASE }};"
          mysql -u ${{ env.MYSQL_USER }} -p"${{ env.MYSQL_PASSWORD }}" ${{ env.MYSQL_DATABASE }} < init.sql
          echo "Database and tables created âœ¨"

      - name: Clone private repo
        run: |
          git clone https://${{ env.PAT }}@github.com/darylcwx/sbrp-data.git
          echo "Cloned successfully âœ¨"

      - name: Move files
        run: |
          cd backend
          mkdir scheduler_data
          cd ../sbrp-data
          mv * ../backend/scheduler_data/
          echo "Files moved successfully âœ¨"

      - name: Load initial data
        run: |
          python load_init_sql.py
          echo "Data loaded successfully âœ¨"

      - name: Run unit tests
        run: |
          cd backend/tests
          python unit_tests.py
          echo "Unit testing run successfully âœ¨"



      - name: Download and install Chrome
        run: |

       # Install the chrome and chrome webdriver
         apt-get install -y xvfb
         apt-get install -y zip
         apt-get install -y wget
         apt-get install -y ca-certificates
         apt-get install -y libnss3-dev libasound2 libxss1 libappindicator3-1 libindicator7 gconf-service libgconf-2-4 libpango1.0-0 xdg-utils fonts-liberation libgbm1
         wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 
         dpkg -i google-chrome*.deb 
         rm google-chrome*.deb
         wget -N http://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
         unzip chromedriver_linux64.zip
         chmod +x chromedriver
         cp chromedriver /usr/local/bin
         rm chromedriver_linux64.zip
         rm chromedriver

      - name: Prepare Selenium
        # https://github.com/marketplace/actions/setup-chromedriver
        uses: nanasess/setup-chromedriver@master

      - name: Run MAIN integration tests
        run: |
          cd selenium_tests
          pytest -m positive
          pytest -m negative
          echo "Main integration testing run successfully âœ¨"

      - name: Load initial data
        run: |
          python load_empty_listing_sql.py
          echo "Data loaded successfully âœ¨"

      - name: Run BOUNDARY integration tests
        run: |
          cd selenium_tests
          pytest -m boundary
          echo "Boundary integration testing run successfully âœ¨"
