name: CI/CD
run-name: ${{ github.actor }} just pushed code ðŸ¤©
on:
  push:
    branches:
      - main
      - for-github-actions
  pull_request:
    branches:
      - main
jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3

      - name: Clean install of dependencies
        run: |
          cd frontend
          npm ci
          echo "Dependencies installed successfully âœ¨"

      - name: Build
        run: |
          cd frontend
          npm run build
          echo "Built successfully âœ¨"

      # Test script here -> Configure package.json
      # - name: Test
      #   run: cd frontend && npm test

      # - name: Run integration tests (NOT YET COMPLETE)
      #   run: |
      #     selenium_tests
      #     echo "Integration testing run successfully âœ¨"


  # flask:
  #   runs-on: ubuntu-latest
  #   env:
  #     MYSQL_USER: root
  #     MYSQL_PASSWORD: root
  #     MYSQL_DATABASE: sbrp_ais_kachang
  #     PAT: ${{ secrets.PAT }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11.6"

  #     - name: Install dependencies
  #       run: |
  #         cd backend && pip install -r requirements.txt
  #         pip install flake8
  #         echo "Dependencies installed successfully âœ¨"
  
  backend:
    runs-on: ubuntu-latest

    env:
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_DATABASE: sbrp_ais_kachang
      PAT: ${{ secrets.PAT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.6"

      - name: Install dependencies
        run: |
          cd backend && pip install -r requirements.txt
          pip install flake8
          echo "Dependencies installed successfully âœ¨"

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          echo "Linted successfully âœ¨"

      - name: List1
        run: |
          cd backend
          ls

      # this is wrong cause it runs infinitely.
      - name: Run flask service
        run: |
          cd backend
          export FLASK_APP=app.py
          export DB_USER=${{ env.MYSQL_USER }}
          export DB_PASSWORD=${{ env.MYSQL_PASSWORD }}
          export DB_HOST="localhost"
          export DB_PORT="3306"
          nohup flask run
          echo "Flask running successfully âœ¨"

      - name: Run MySQL service
        run: |
          sudo systemctl start mysql.service
          echo "MySQL set up successfully âœ¨"

      - name: Create Database and Tables
        run: |
          mysql -u ${{ env.MYSQL_USER }} -p"${{ env.MYSQL_PASSWORD }}" -e "CREATE DATABASE ${{ env.MYSQL_DATABASE }};"
          mysql -u ${{ env.MYSQL_USER }} -p"${{ env.MYSQL_PASSWORD }}" ${{ env.MYSQL_DATABASE }} < init.sql
          echo "Database and tables created âœ¨"

      - name: Clone private repo
        run: |
          git clone https://${{ env.PAT }}@github.com/darylcwx/sbrp-data.git
          echo "Cloned successfully âœ¨"

      - name: Move files
        run: |
          cd backend
          mkdir scheduler_data
          cd ../sbrp-data
          mv * ../backend/scheduler_data/
          echo "Files moved successfully âœ¨"

      # - name: Load initial data
      #   run: |
      #     python load_init_sql.py
      #     echo "Data loaded successfully âœ¨"

      - name: Start services
        run: |
          python startservices.py
          echo "Flask, load_init_sql.py, npm, run successfully âœ¨"

      - name: Run unit tests
        run: |
          cd backend/tests
          python unit_tests.py
          echo "Unit testing run successfully âœ¨"
